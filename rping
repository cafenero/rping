#!/usr/bin/env python3

import time
import re
import sys
import os
import signal
import termios
import subprocess
from concurrent.futures import ThreadPoolExecutor
import socket
from socket import AF_INET, SOCK_DGRAM
import ipaddress
from argparse import ArgumentParser
from datetime import datetime
from rich.console import Console
from rich.table import Table

CLEAR_LINE_NUME = 128
PADDING = 1
FLAG_RESET_RESULT = False
FLAG_PING_LOOP_END = False
pattern = '.*time=(.*)'
COMMENT_OUT_PATTERN = r'^[#|/].*'
WHITESPACE_PATTERN = r"^\s*$"
Debug = False
result = {}
max_targets_len = 0
targets = ""
count = 1
console = Console()
Debug_date_before = None


def initClearScreen():
    for i in range(0, CLEAR_LINE_NUME):
        print("                \
                               \
                               \
                               \
                               ")
    print("\033[" + str(CLEAR_LINE_NUME) + "A", end="")


def sort_uniq_target():
    global targets
    targets = set(targets)
    targets = sorted(targets)


def exept_comment_out_hosts():
    global targets
    global WHITESPACE_PATTERN
    global COMMENT_OUT_PATTERN
    temp_targets = []
    for i in targets:
        if ((not re.match(COMMENT_OUT_PATTERN, i)) and
                (not re.match(WHITESPACE_PATTERN, i))):
            temp_targets.append(i)
    targets = temp_targets


def set_target_len_max():
    global targets
    global max_targets_len
    for f in targets:
        if len(f) > max_targets_len:
            max_targets_len = len(f) + PADDING


def init_result():
    global targets
    for target in targets:
        ipaddress = nslookup(target)
        result[target] = {"lastsec": 0, "avgsec": 0, "maxsec": 0.0,
                          "minsec": 0, "totalsec": 0, "succ": 0, "fail": 0,
                          "ipaddress": ipaddress}


def clear_result():
    global targets
    for target in targets:
        result[target]["lastsec"] = 0
        result[target]["avgsec"] = 0
        result[target]["maxsec"] = 0.0
        result[target]["minsec"] = 0
        result[target]["totalsec"] = 0
        result[target]["succ"] = 0
        result[target]["fail"] = 0


def init_target_and_result():
    exept_comment_out_hosts()
    sort_uniq_target()
    set_target_len_max()
    init_result()


def ping_and_update_result(target, count):
    res = ping_target(target)
    update_result(target, res, count)
    return ""


def ping_target(target):
    return subprocess.run(
        ["ping", target, "-c", "1", "-W", "300"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)


def getTime(str):
    # sample: 64 bytes from 192.168.3.20: icmp_seq=1 ttl=64 time=0.071 ms
    result = re.match(pattern, str.split("\n")[1])
    if result:
        return result.group(1).split(" ")
    return None


def getFileContent(path):
    with open(path) as f:
        ret = [s.strip() for s in f.readlines()]
    return ret


def get_option():
    arg = ArgumentParser()
    arg.add_argument('-i', '--interval', type=float, default=1,
                     help='ping interval')
    arg.add_argument('-t', '--target', '--targets', nargs='*',
                     help="specify ping targets")
    arg.add_argument('-f', '--file', type=str, default="",
                     help='file')
    arg.add_argument('-d', '--debug', action='store_true',  default="")
    arg.add_argument('-s', '--sync', action='store_true',  default="",
                     help='Sync ping response')
    return arg.parse_args()


def is_num(s):
    if s is None:
        return False
    try:
        float(s)
    except ValueError:
        return False
    else:
        return True


def update_result(t, res, count):
    if res.returncode == 0:
        sec_unit = getTime(res.stdout.decode("utf-8"))
        if sec_unit:
            sec_unit[0] = float(sec_unit[0])
            if sec_unit[1] == "ms":
                pass
            elif sec_unit[1] == "s":
                sec_unit[0] = sec_unit[0] * 1000.0
            elif sec_unit[1] == "us":
                sec_unit[0] = sec_unit[0] / 1000.0
            elif sec_unit[1] == "ns":
                sec_unit[0] = sec_unit[0] / 1000.0 / 1000.0
            else:
                print(res.stdout.decode("utf-8"))
                print(sec_unit)
                print("sec unit error")
                exit(1)

            if result[t]["maxsec"] < sec_unit[0]:
                result[t]["maxsec"] = sec_unit[0]
            if (result[t]["minsec"] == 0 or result[t]["minsec"] > sec_unit[0]):
                result[t]["minsec"] = sec_unit[0]

            result[t]["lastsec"] = sec_unit[0]
            result[t]["succ"] += 1
            result[t]["totalsec"] = result[t]["totalsec"] + sec_unit[0]
            result[t]["avgsec"] = result[t]["totalsec"] / count
        else:
            result[t]["fail"] += 1
            result[t]["lastsec"] = 0
    else:
        result[t]["fail"] += 1
        result[t]["lastsec"] = 0


def debug_printTimeDelta():
    global Debug
    global Debug_date_before
    if Debug:
        date_now = datetime.now()
        if Debug_date_before is None:
            print("Elapsed delta:")
            pass
        else:
            print("Elapsed delta:", date_now - Debug_date_before, "[s]")
        Debug_date_before = date_now


def print_formated_header():
    print("> count: " + str(count) + ' interval: '
          + str(interval) + " [sec], " + '{:.2f}'.format(1/interval)
          + " [ping/sec]")
    print("> Key input: Q=End rping,  R=Reset counter,  r=Refresh screen")


def calc_total(result):
    total = {"succ": 0, "fail": 0, "last": 0, "avg": 0, "max": 0, "min": 0}
    temp_max = None
    temp_min = None
    for k, v in result.items():
        total["succ"] = total["succ"] + result[k]["succ"]
        total["fail"] = total["fail"] + result[k]["fail"]
        total["avg"] = total["avg"] + result[k]["avgsec"]
        total["last"] = total["last"] + result[k]["lastsec"]
        # max
        if temp_max is None or temp_max < result[k]["maxsec"]:
            temp_max = result[k]["maxsec"]
        # min
        if result[k]["minsec"] == 0:
            continue
        if temp_min is None or temp_min > result[k]["minsec"]:
            temp_min = result[k]["minsec"]
    total["max"] = mod_sec_format_and_unit(temp_max)
    total["min"] = mod_sec_format_and_unit(temp_min)
    total["avg"] = mod_sec_format_and_unit(total["avg"] / len(result))
    total["last"] = mod_sec_format_and_unit((total["last"] / len(result)))
    total["fail"] = set_fail_to_red(total["fail"])
    return total


def mod_sec_format_and_unit(sec):
    if sec == 0 or not is_num(sec):
        ret = "[red bold]"
        ret += ('%12s' % "N/A")
        ret += "[/red bold]"
    else:
        if 1000 <= sec:
            ret = ('%10.3f' % (sec / 1000) + "[red bold]s[red bold]")
        elif 0.001 <= sec and sec < 1000:
            ret = ('%10.3f' % sec + "[green bold]ms[/green bold]")
        elif 0.000001 <= sec and sec < 0.001:
            ret = ('%10.3f' % (sec * 1000) + "[blue bold]us[/blue bold]")
        elif (0.000000001 <= sec and
              sec < 0.000001):
            ret = ('%10.3f' % (sec * 1000 * 1000) +
                   "[cyan bold]ns[/cyan bold]")
        else:
            print(sec)
            print("sec unit error")
            exit(1)
    return ret


def set_fail_to_red(num):
    if num > 0:
        ret = "[red bold]"
        ret += ('%6s' % str(num))
        ret += "[/red bold]"
        return ret
    return '%6s' % str(num)


def get_formated_result_line(k, v, table):
    hostname_field = ""
    try:
        if ipaddress.ip_address(k):
            hostname_field = k
    except ValueError:
        # if is not address, throw & catch exception.
        hostname_field = k + " (" + v["ipaddress"] + ")"
    return table.add_row(
        hostname_field,
        '%6d' % v["succ"],
        set_fail_to_red(v["fail"]),
        mod_sec_format_and_unit(v["lastsec"]),
        mod_sec_format_and_unit(v["avgsec"]),
        mod_sec_format_and_unit(v["maxsec"]),
        mod_sec_format_and_unit(v["minsec"])
    )


def print_formated_result(result, end=False):
    print_formated_header()
    total = calc_total(result)
    table = Table(show_header=True, header_style="bold magenta")
    table.show_footer = True
    table.add_column("Hostname", "# of hosts: " + str(len(result)),
                     justify="right")
    table.add_column("Succ", str(total["succ"]), justify="right")
    table.add_column("Fail", str(total["fail"]), justify="right")
    table.add_column("Last", str(total["last"]), justify="right")
    table.add_column("Avg", str(total["avg"]), justify="right")
    table.add_column("Max", str(total["max"]), justify="right")
    table.add_column("Min", str(total["min"]), justify="right")
    for k, v in result.items():
        get_formated_result_line(k, v, table)
    console.print(table)
    if not end:
        print("\033[100A", end="")


def print_help_exit():
    print("CLI example:")
    print(" main.py -t example.com")
    print(" main.py -f hosts.txt")
    exit()


def nslookup(hostname):
    try:
        res = socket.getaddrinfo(hostname, None)
    except socket.gaierror:
        print("Invalid hostname:", hostname)
        exit(1)
    for family, kind, proto, canonical, sockaddr in res:
        if family == AF_INET and kind == SOCK_DGRAM:
            return sockaddr[0]


def check_target(filepath):
    global targets
    if targets == "":
        print_help_exit()
    if len(targets) == 0:
        print("Empty file:", filepath)
        exit(1)


def get_key_input(fd):
    global RESET_RESULT_FLAG
    global FLAG_PING_LOOP_END
    global result

    try:
        while True:
            termios.tcsetattr(fd, termios.TCSANOW, new)
            ch = sys.stdin.read(1)
            if ch == "R":
                clear_result()
                # RESET_RESULT_FLAG = True
            elif ch == "r":
                initClearScreen()
                debug_printTimeDelta()
                print_formated_result(result)
            elif ch == "Q":
                # future.cancelled()
                FLAG_PING_LOOP_END = True
                break
            time.sleep(0.1)
    finally:
        termios.tcsetattr(fd, termios.TCSANOW, old)


def ping_loop(executor):
    count = 1
    while True:
        if FLAG_PING_LOOP_END:
            break
        debug_printTimeDelta()
        try:
            future = []
            for target in targets:
                future.append(
                    executor.submit(ping_and_update_result, target, count))
            if sync:
                for f in future:
                    f.result()
            print_formated_result(result)
            time.sleep(interval)
            count += 1
        except KeyboardInterrupt:
            print("                ")
            print("\033[10A", end="")


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal.SIG_IGN)

    args = get_option()
    Debug = args.debug
    interval = args.interval
    sync = args.sync
    if args.target:
        targets = args.target
    if args.file:
        filepath = args.file
        if os.path.exists(filepath):
            targets = getFileContent(filepath)
        else:
            print("No valid filepath:", filepath)
            exit(1)

    check_target(targets)
    init_target_and_result()
    initClearScreen()

    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = old.copy()
    new[3] &= ~termios.ICANON
    new[3] &= ~termios.ECHO

    with ThreadPoolExecutor() as executor:
        executor.submit(get_key_input, fd)
        ping_loop(executor)

    debug_printTimeDelta()
    print_formated_result(result, end=True)
